import Leanur.Nock.Basic
import Mathlib.Data.Nat.Bits

namespace Leanur.Nock

open Std
open Noun

private def bs2s (bits : Array Bool) : String :=
  bits.foldl (fun s b => s.append (if b then "1" else "0")) ""

private def s2bs (s : String) : Array Bool :=
  s.toList.toArray.map fun c => c == '1'

scoped prefix:50 "#b" => s2bs
#guard (#b"0") == #[false]
#guard (#b"1") == #[true]
#guard (#b"01") == #[false, true]
#guard (#b"10") == #[true, false]
#guard (#b"110") == #[true, true, false]
#guard (#b"100") == #[true, false, false]

private def Nat.toBits (n : Nat) : Array Bool := n.bits.toArray.reverse

/- most -> least len bits[1:] ++ true ++ N * false where N is len.bits.size -/
private def mat' (len : Nat) : Array Bool :=
  let bits := len.bits.toArray
  bits.pop.reverse ++ #[true] ++ (Array.range bits.size |>.map fun _ => false)

#guard mat' 1 == (#b"10")
#guard mat' 2 == (#b"0100")
#guard mat' 3 == (#b"1100")
#guard mat' 4 == (#b"001000")
#guard mat' 5 == (#b"011000")
#guard mat' 6 == (#b"101000")
#guard mat' 7 == (#b"111000")
#guard mat' 8 == (#b"00010000")
#guard mat' 9 == (#b"00110000")
#guard mat' 10 == (#b"01010000")
#guard mat' 11 == (#b"01110000")
#guard mat' 12 == (#b"10010000")

private def jamNoun (cache : HashMap Noun Nat) (n : Noun) : Array Bool :=
  match n with
    /- atom (least sig to most sig) ++ jammed len ++ 0b0 -/
    | atom a =>
      let bits := Nat.toBits a
      bits ++ mat' bits.size ++ #[false]
    /- tail ++ head ++ 0b01 -/
    | cell a b => jamNoun cache b ++ jamNoun cache a ++ #[false, true]

def Noun.jam (noun : Noun) : Atom :=
  let bits := jamNoun HashMap.empty noun
  BitVec.ofBoolListBE bits.toList |>.toNat

open DSL in #guard ⟦0⟧.jam == ↑2
open DSL in #guard ⟦1⟧.jam == ↑12
open DSL in #guard ⟦2⟧.jam == ↑72
open DSL in #guard ⟦19⟧.jam == ↑2480
-- open DSL in #guard ⟦20⟧.jam == ↑699024
open DSL in #guard ⟦581949002⟧.jam == ↑1191831557952

open DSL in #guard ⟦0 19⟧.jam == ↑39689
open DSL in #guard ⟦1 1⟧.jam == ↑817
open DSL in #guard ⟦10000 10000⟧.jam == ↑4952983169

open DSL in #guard ⟦999999999 999999999⟧.jam == ↑1301217674263809
open DSL in #guard ⟦222 444 888⟧.jam == ↑250038217192960129
open DSL in #guard ⟦⟦107 110⟧ ⟦107 110⟧⟧.jam == ↑635080761093
open DSL in #guard ⟦0 1 2 3 4 5 6 7 8 9 10⟧.jam == ↑25681224503728653597984370231065
open DSL in #guard ⟦99 100 101 102 103 104 0⟧.jam == ↑223372995869285333705242560449
open DSL in #guard ⟦⟦222 444 888⟧ ⟦222 444 888⟧⟧.jam == ↑170479614045978345989
open DSL in #guard ⟦⟦0 1⟧ ⟦1 2⟧ ⟦2 3⟧ ⟦3 4⟧ 0⟧.jam == ↑11976248475217237797
-- [[0 1] [1 2] [2 3] [3 4] [4 5] [5 6] [6 7] [7 8] [8 9] 0] == 7.694.087.033.387.855.647.747.387.855.514.468.399.947.749.137.782.565.
-- [[0 1] [2 3] [4 5] [6 7] [8 9] [10 11] [12 13] [14 15] [16 17] [18 19] [20 21] 0] == 308.947.677.754.874.070.959.300.747.182.056.036.528.545.493.781.368.831.595.479.491.505.523.344.414.501.
-- [[%vary 'Origin'] [%vary 'Accept-Encoding']] == 2.923.956.498.268.356.738.336.949.786.175.643.457.788.180.560.108.194.340.456.079.961.920.720.567.301.
open DSL in #guard ⟦%"x-cached" "HIT"⟧.jam == ↑3419056981361227851413339139505665
/-
[
  [%x-cached 'HIT']
  [%vary 'Origin']
  [%vary 'Accept-Encoding']
  0
]
 serializes to
 54.024.941.019.988.598.271.402.968.678.037.641.784.219.129.665.004.500.606.995.034.380.342.041.694.044.032.862.185.742.959.381.716.818.503.067.105.285.
-/
/-
        // [
        //  [%x-cached 'HIT']
        //  [%vary 'Origin']
        //  [%vary 'Accept-Encoding']
        //  [%connection %keep-alive]
        //  0
        // ]
        // serializes to
        // 337.262.554.346.536.272.809.263.434.776.769.507.747.563.642.163.274.356.590.866.601.381.185.210.047.197.602.041.291.492.349.359.710.146.253.456.410.124.597.539.747.968.329.210.676.233.756.528.621.237.772.236.684.881.982.257.157.
-/
/-
        // [
        //  [%x-cached 'HIT']
        //  [%vary 'Origin']
        //  [%vary 'Accept-Encoding']
        //  [%connection %keep-alive]
        //  [%content-length '59']
        //  0
        // ]
        // serializes to
        // 3.990.449.691.910.602.529.066.905.532.683.432.376.481.595.709.178.878.504.454.195.556.485.477.933.263.285.640.666.005.735.466.251.842.927.155.004.960.860.680.532.900.649.099.981.551.377.940.562.846.107.819.739.708.673.550.687.574.046.762.646.573.624.712.055.218.066.331.781.777.383.880.709.
-/
/-
        // [
        //  [%x-cached 'HIT']
        //  [%vary 'Origin']
        //  [%vary 'Accept-Encoding']
        //  [%connection %keep-alive]
        //  [%content-length '59']
        //  [%content-type 'application/json']
        //  0
        // ]
        // serializes to
        // 457.091.532.517.554.390.786.006.469.499.335.612.968.565.672.928.161.381.020.311.663.688.274.027.085.520.617.498.455.482.250.967.104.025.408.758.206.722.076.439.600.215.410.221.147.402.178.087.201.942.131.610.143.956.380.101.670.231.516.755.661.365.800.622.895.086.504.659.989.465.932.175.163.419.593.361.271.135.450.933.952.288.380.655.088.063.544.328.215.173.068.577.627.294.732.347.635.717.
-/
/-
        // [
        //  [%x-cached 'HIT']
        //  [%vary 'Origin']
        //  [%vary 'Accept-Encoding']
        //  [%connection %keep-alive]
        //  [%content-length '59']
        //  [%content-type 'application/json']
        //  [%date 'Fri, 08 Jul 2022 16:43:50 GMT']
        //  0
        // ]
        // serializes to
        // 13.511.042.605.182.938.704.141.471.102.024.299.594.955.332.558.307.008.475.497.880.712.859.675.484.538.257.353.584.918.969.851.530.816.463.453.015.799.780.201.687.994.505.320.116.239.292.288.026.317.441.863.373.121.089.158.775.350.462.009.180.764.811.763.710.140.560.982.428.678.690.500.900.830.579.867.363.560.770.528.863.245.324.334.716.215.913.775.596.115.997.818.308.278.262.023.037.514.343.972.996.368.914.301.576.422.996.306.770.335.657.447.377.076.271.378.523.965.990.245.753.334.799.571.283.621.312.517.
-/
/-
        //  [%server 'nginx/1.14.0 (Ubuntu)'] serializes to
        //  36.625.686.482.471.374.629.531.055.727.019.932.223.514.833.888.924.393.604.670.670.633.971.596.801.
-/
/-
        // (jam [[%x-cached 'HIT'] [%vary 'Origin'] [%vary 'Accept-Encoding'] [%connection %keep-alive] [%content-length '59'] [%content-type 'application/json'] [%date 'Fri, 08 Jul 2022 16:43:50 GMT'] [%server 'nginx/1.14.0 (Ubuntu)'] 0])
        // [
        //  [%x-cached 'HIT']
        //  [%vary 'Origin']
        //  [%vary 'Accept-Encoding']
        //  [%connection %keep-alive]
        //  [%content-length '59']
        //  [%content-type 'application/json']
        //  [%date 'Fri, 08 Jul 2022 16:43:50 GMT']
        //  [%server 'nginx/1.14.0 (Ubuntu)']
        //  0
        // ]
        // serializes to
        // 3.043.179.738.672.136.626.575.394.190.673.759.579.727.849.692.505.022.485.010.845.918.679.803.129.305.613.240.481.085.317.833.394.833.266.220.825.965.186.842.937.880.270.236.914.729.803.832.464.269.764.501.574.488.877.790.107.593.782.177.681.982.718.127.995.102.131.872.994.171.509.635.987.438.144.206.782.752.956.394.374.740.266.989.132.241.617.591.666.709.510.062.224.526.419.612.002.666.485.664.696.539.844.896.863.868.458.496.893.612.588.610.229.380.812.024.688.103.535.216.455.403.528.290.497.755.248.780.777.953.932.500.730.437.340.171.838.891.251.943.028.869.039.612.929.246.368.535.415.502.947.874.821.
-/
/-
        // [
        //  %request
        //  0
        //  'POST'
        //  'http://eth-mainnet.urbit.org:8545'
        //  [['Content-Type' 'application/json'] 0]
        //  0
        //  78
        //  '[{"params":[],"id":"block number","jsonrpc":"2.0","method":"eth_blockNumber"}]'
        // ]
        // serializes to
        // 534.926.240.328.183.504.043.224.467.158.150.263.359.506.153.835.684.400.054.708.654.784.265.586.779.466.767.311.401.093.568.872.399.514.089.871.794.788.465.339.360.316.141.009.784.521.401.502.584.590.628.538.383.397.474.667.076.686.296.931.914.112.162.585.777.490.924.604.432.397.967.740.482.953.038.069.595.525.949.395.091.512.693.509.388.265.834.094.423.223.982.487.236.123.144.939.682.105.684.811.115.401.159.600.617.316.591.045.520.893.570.145.126.936.115.415.644.005.172.954.075.003.434.319.780.206.191.080.707.020.476.210.689.
        //
        // 534926240328183504043224467158150263359506153835684400054708654784265586779466767311401093568872399514089871794788465339360316141009784521401502584590628538383397474667076686296931914112162585777490924604432397967740482953038069595525949395091512693509388265834094423223982487236123144939682105684811115401159600617316591045520893570145126936115415644005172954075003434319780206191080707020476210689
-/


-- private def cueLen (bits : Array Bool) : Nat :=

end Leanur.Nock
